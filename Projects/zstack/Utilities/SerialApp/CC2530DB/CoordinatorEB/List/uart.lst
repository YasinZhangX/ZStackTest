###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         26/Nov/2017  01:20:55 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\Source\uart.c             #
#    Command line       =  -f D:\Zigbee\workspace\JustTry\ZStackTest\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\Zigbee\workspace\JustTry\ZStackTest\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\Zigbee\workspace\JustTry #
#                          \ZStackTest\Projects\zstack\Utilities\SerialApp\So #
#                          urce\uart.c -D HAL_UART=TRUE -D SERIAL_APP_PORT=0  #
#                          -lC D:\Zigbee\workspace\JustTry\ZStackTest\Project #
#                          s\zstack\Utilities\SerialApp\CC2530DB\CoordinatorE #
#                          B\List\ -lA D:\Zigbee\workspace\JustTry\ZStackTest #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Coor #
#                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --no_code_motion --debug --core=plain        #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\Zigbee\workspace\JustTr #
#                          y\ZStackTest\Projects\zstack\Utilities\SerialApp\C #
#                          C2530DB\ -I D:\Zigbee\workspace\JustTry\ZStackTest #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\S #
#                          ource\ -I D:\Zigbee\workspace\JustTry\ZStackTest\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\ZMain\TI2530DB\ -I D:\Zigbee\workspace\JustTry\ #
#                          ZStackTest\Projects\zstack\Utilities\SerialApp\CC2 #
#                          530DB\..\..\..\..\..\Components\hal\include\ -I    #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\target\CC2530EB\ -I                  #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\ -I                          #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                       #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\ -I                  #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\single_chip\ -I      #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\Zigbee\workspace\JustTry\ZStac #
#                          kTest\Projects\zstack\Utilities\SerialApp\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\saddr\ -I                       #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\sdata\ -I                       #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\af\ -I D:\Zigbee\workspace\JustTry #
#                          \ZStackTest\Projects\zstack\Utilities\SerialApp\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\ -I     #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sapi\ -I                           #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sec\ -I D:\Zigbee\workspace\JustTr #
#                          y\ZStackTest\Projects\zstack\Utilities\SerialApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sys\ -I    #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I D:\Zigbee\workspace\JustTr #
#                          y\ZStackTest\Projects\zstack\Utilities\SerialApp\C #
#                          C2530DB\..\..\..\..\..\Components\zmac\ -I         #
#                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\zmac\f8w\ -Ohz --require_prototypes      #
#    List file          =  D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\CoordinatorEB\Li #
#                          st\uart.lst                                        #
#    Object file        =  D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\CoordinatorEB\Ob #
#                          j\uart.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zstack\Utilities\SerialApp\Source\uart.c
      1          #include <string.h>
      2          #include <stdio.h>
      3          
      4          #include "AF.h"
      5          #include "ZComDef.h"
      6          #include "OnBoard.h"
      7          #include "ZStackTest.h"
      8          
      9          #include "hal_types.h"
     10          #include "hal_led.h"
     11          #include "hal_uart.h"
     12          
     13          #include "uart.h"
     14          
     15          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
     16          void Delay_ms(uint8 Time);
     17          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     18          void Uart0_Handle(uint8* ZStackTest_TxBuf)
   \                     Uart0_Handle:
     19          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 532
   \   000005   7582EC       MOV     DPL,#-0x14
   \   000008   7583FD       MOV     DPH,#-0x3
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   EA           MOV     A,R2
   \   00000F   FE           MOV     R6,A
   \   000010   EB           MOV     A,R3
   \   000011   FF           MOV     R7,A
     20            uint8 cmd[256]={0};
                         ^
Warning[Ta010]: Write to a __constptr pointer
   \   000012   758214       MOV     DPL,#0x14
   \   000015   758301       MOV     DPH,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_16
   \   00001B   AC82         MOV     R4,DPL
   \   00001D   AD83         MOV     R5,DPH
   \   00001F   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000022   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000025   7400         MOV     A,#0x100
   \   000027   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     21            uint8 tmpbuf[256]={0};
                         ^
Warning[Ta010]: Write to a __constptr pointer
   \   00002A   1D           DEC     R5
   \   00002B   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00002E   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000031   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     22          
     23            if(strstr((const char *)ZStackTest_TxBuf,"LED")!=NULL)  //receive cmd "LED"
   \   000034                ; Setup parameters for call to function strstr
   \   000034   7C..         MOV     R4,#`?<Constant "LED">` & 0xff
   \   000036   7D..         MOV     R5,#(`?<Constant "LED">` >> 8) & 0xff
   \   000038   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003B   6060         JZ      ??Uart0_Handle_0
     24            {
     25              if (strstr((const char*)ZStackTest_TxBuf, "LED1ON") != NULL)
   \   00003D                ; Setup parameters for call to function strstr
   \   00003D   7C..         MOV     R4,#`?<Constant "LED1ON">` & 0xff
   \   00003F   7D..         MOV     R5,#(`?<Constant "LED1ON">` >> 8) & 0xff
   \   000041   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000044   6007         JZ      ??Uart0_Handle_1
     26              {
     27                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   000046                ; Setup parameters for call to function HalLedSet
   \   000046   7A01         MOV     R2,#0x1
   \   000048   7901         MOV     R1,#0x1
   \   00004A   12....       LCALL   ??HalLedSet?relay
     28              }
     29              if (strstr((const char*)ZStackTest_TxBuf, "LED1OFF") != NULL)
   \                     ??Uart0_Handle_1:
   \   00004D                ; Setup parameters for call to function strstr
   \   00004D   7C..         MOV     R4,#`?<Constant "LED1OFF">` & 0xff
   \   00004F   7D..         MOV     R5,#(`?<Constant "LED1OFF">` >> 8) & 0xff
   \   000051   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000054   6007         JZ      ??Uart0_Handle_2
     30              {
     31                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   000056                ; Setup parameters for call to function HalLedSet
   \   000056   7A00         MOV     R2,#0x0
   \   000058   7901         MOV     R1,#0x1
   \   00005A   12....       LCALL   ??HalLedSet?relay
     32              }
     33              if (strstr((const char*)ZStackTest_TxBuf, "LED2ON") != NULL)
   \                     ??Uart0_Handle_2:
   \   00005D                ; Setup parameters for call to function strstr
   \   00005D   7C..         MOV     R4,#`?<Constant "LED2ON">` & 0xff
   \   00005F   7D..         MOV     R5,#(`?<Constant "LED2ON">` >> 8) & 0xff
   \   000061   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000064   6007         JZ      ??Uart0_Handle_3
     34              {
     35                HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
   \   000066                ; Setup parameters for call to function HalLedSet
   \   000066   7A01         MOV     R2,#0x1
   \   000068   7902         MOV     R1,#0x2
   \   00006A   12....       LCALL   ??HalLedSet?relay
     36              }
     37              if (strstr((const char*)ZStackTest_TxBuf, "LED2OFF") != NULL)
   \                     ??Uart0_Handle_3:
   \   00006D                ; Setup parameters for call to function strstr
   \   00006D   7C..         MOV     R4,#`?<Constant "LED2OFF">` & 0xff
   \   00006F   7D..         MOV     R5,#(`?<Constant "LED2OFF">` >> 8) & 0xff
   \   000071   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000074   6007         JZ      ??Uart0_Handle_4
     38              {
     39                HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
   \   000076                ; Setup parameters for call to function HalLedSet
   \   000076   7A00         MOV     R2,#0x0
   \   000078   7902         MOV     R1,#0x2
   \   00007A   12....       LCALL   ??HalLedSet?relay
     40              }
     41              if (strstr((const char*)ZStackTest_TxBuf, "LED3ON") != NULL)
   \                     ??Uart0_Handle_4:
   \   00007D                ; Setup parameters for call to function strstr
   \   00007D   7C..         MOV     R4,#`?<Constant "LED3ON">` & 0xff
   \   00007F   7D..         MOV     R5,#(`?<Constant "LED3ON">` >> 8) & 0xff
   \   000081   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000084   6007         JZ      ??Uart0_Handle_5
     42              {
     43                HalLedSet(HAL_LED_3, HAL_LED_MODE_ON);
   \   000086                ; Setup parameters for call to function HalLedSet
   \   000086   7A01         MOV     R2,#0x1
   \   000088   7904         MOV     R1,#0x4
   \   00008A   12....       LCALL   ??HalLedSet?relay
     44              }
     45              if (strstr((const char*)ZStackTest_TxBuf, "LED3OFF") != NULL)
   \                     ??Uart0_Handle_5:
   \   00008D                ; Setup parameters for call to function strstr
   \   00008D   7C..         MOV     R4,#`?<Constant "LED3OFF">` & 0xff
   \   00008F   7D..         MOV     R5,#(`?<Constant "LED3OFF">` >> 8) & 0xff
   \   000091   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000094   6007         JZ      ??Uart0_Handle_0
     46              {
     47                HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF);
   \   000096                ; Setup parameters for call to function HalLedSet
   \   000096   7A00         MOV     R2,#0x0
   \   000098   7904         MOV     R1,#0x4
   \   00009A   12....       LCALL   ??HalLedSet?relay
     48              }
     49            }
     50          
     51            if(strstr((const char *)ZStackTest_TxBuf,"AT") != NULL)  //receive cmd "AT"
   \                     ??Uart0_Handle_0:
   \   00009D                ; Setup parameters for call to function strstr
   \   00009D   7C..         MOV     R4,#`?<Constant "AT">` & 0xff
   \   00009F   7D..         MOV     R5,#(`?<Constant "AT">` >> 8) & 0xff
   \   0000A1   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A4   7003         JNZ     $+5
   \   0000A6   02....       LJMP    ??Uart0_Handle_6 & 0xFFFF
     52            {
     53              sscanf((const char*)ZStackTest_TxBuf, "%*[^+]%*c%[^#]%*c%s", cmd, tmpbuf);
   \   0000A9                ; Setup parameters for call to function sscanf
   \   0000A9   7414         MOV     A,#0x14
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   8582..       MOV     ?V0 + 0,DPL
   \   0000B1   8583..       MOV     ?V0 + 1,DPH
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   758216       MOV     DPL,#0x16
   \   0000BC   758301       MOV     DPH,#0x1
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_16
   \   0000C2   8583..       MOV     ?V0 + 1,DPH
   \   0000C5   78..         MOV     R0,#?V0 + 0
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CA   7C..         MOV     R4,#`?<Constant "%*[^+]%*c%[^#]%*c%s">` & 0xff
   \   0000CC   7D..         MOV     R5,#(`?<Constant "%*[^+]%*c%[^#]%*c%s">` >> 8) & 0xff
   \   0000CE   EE           MOV     A,R6
   \   0000CF   FA           MOV     R2,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   FB           MOV     R3,A
   \   0000D2   12....       LCALL   ??sscanf?relay
   \   0000D5   7404         MOV     A,#0x4
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
     54              if (strstr((const char*)cmd, "GETADDR") != NULL) {
   \   0000DA                ; Setup parameters for call to function strstr
   \   0000DA   7C..         MOV     R4,#`?<Constant "GETADDR">` & 0xff
   \   0000DC   7D..         MOV     R5,#(`?<Constant "GETADDR">` >> 8) & 0xff
   \   0000DE   758214       MOV     DPL,#0x14
   \   0000E1   758301       MOV     DPH,#0x1
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_16
   \   0000E7   AA82         MOV     R2,DPL
   \   0000E9   AB83         MOV     R3,DPH
   \   0000EB   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000EE   6039         JZ      ??CrossCallReturnLabel_0
     55                char addrbuff[20] = {0};
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   AC82         MOV     R4,DPL
   \   0000F8   AD83         MOV     R5,DPH
   \   0000FA   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   0000FD   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   000100   7414         MOV     A,#0x14
   \   000102   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     56                sprintf(addrbuff, "SelfshortAddr:%04X", NLME_GetShortAddr());
   \   000105                ; Setup parameters for call to function sprintf
   \   000105                ; Setup parameters for call to function NLME_GetShortAddr
   \   000105   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000108   8A..         MOV     ?V0 + 0,R2
   \   00010A   8B..         MOV     ?V0 + 1,R3
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   7C..         MOV     R4,#`?<Constant "SelfshortAddr:%04X">` & 0xff
   \   000113   7D..         MOV     R5,#(`?<Constant "SelfshortAddr:%04X">` >> 8) & 0xff
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   AA82         MOV     R2,DPL
   \   00011C   AB83         MOV     R3,DPH
   \   00011E   12....       LCALL   ??sprintf?relay
   \   000121   7402         MOV     A,#0x2
   \   000123   12....       LCALL   ?DEALLOC_XSTACK8
     57                HalUARTWrite (SERIAL_APP_PORT, (uint8 *)addrbuff, strlen(addrbuff));
   \   000126                ; Setup parameters for call to function HalUARTWrite
   \   000126                ; Setup parameters for call to function strlen
   \   000126   12....       LCALL   ?Subroutine2 & 0xFFFF
     58              }
     59              if (strstr((const char*)cmd, "P2P") != NULL) {
   \                     ??CrossCallReturnLabel_0:
   \   000129                ; Setup parameters for call to function strstr
   \   000129   7C..         MOV     R4,#`?<Constant "P2P">` & 0xff
   \   00012B   7D..         MOV     R5,#(`?<Constant "P2P">` >> 8) & 0xff
   \   00012D   758214       MOV     DPL,#0x14
   \   000130   758301       MOV     DPH,#0x1
   \   000133   12....       LCALL   ?XSTACK_DISP0_16
   \   000136   AA82         MOV     R2,DPL
   \   000138   AB83         MOV     R3,DPH
   \   00013A   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00013D   6003         JZ      ??Uart0_Handle_7
     60                ZStackTest_Send_P2P_Message();
   \   00013F                ; Setup parameters for call to function ZStackTest_Send_P2P_Message
   \   00013F   12....       LCALL   ??ZStackTest_Send_P2P_Message?relay
     61              }
     62              if (strstr((const char*)cmd, "BROADCAST") != NULL) {
   \                     ??Uart0_Handle_7:
   \   000142                ; Setup parameters for call to function strstr
   \   000142   7C..         MOV     R4,#`?<Constant "BROADCAST">` & 0xff
   \   000144   7D..         MOV     R5,#(`?<Constant "BROADCAST">` >> 8) & 0xff
   \   000146   758214       MOV     DPL,#0x14
   \   000149   758301       MOV     DPH,#0x1
   \   00014C   12....       LCALL   ?XSTACK_DISP0_16
   \   00014F   AA82         MOV     R2,DPL
   \   000151   AB83         MOV     R3,DPH
   \   000153   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000156   6003         JZ      ??Uart0_Handle_8
     63                ZStackTest_Send_Broadcast_Message();
   \   000158                ; Setup parameters for call to function ZStackTest_Send_Broadcast_Message
   \   000158   12....       LCALL   ??ZStackTest_Send_Broadcast_Message?relay
     64              }
     65              if (strstr((const char*)cmd, "GROUP") != NULL) {
   \                     ??Uart0_Handle_8:
   \   00015B                ; Setup parameters for call to function strstr
   \   00015B   7C..         MOV     R4,#`?<Constant "GROUP">` & 0xff
   \   00015D   7D..         MOV     R5,#(`?<Constant "GROUP">` >> 8) & 0xff
   \   00015F   758214       MOV     DPL,#0x14
   \   000162   758301       MOV     DPH,#0x1
   \   000165   12....       LCALL   ?XSTACK_DISP0_16
   \   000168   AA82         MOV     R2,DPL
   \   00016A   AB83         MOV     R3,DPH
   \   00016C   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00016F   6003         JZ      ??Uart0_Handle_6
     66                ZStackTest_Send_Group_Message();
   \   000171                ; Setup parameters for call to function ZStackTest_Send_Group_Message
   \   000171   12....       LCALL   ??ZStackTest_Send_Group_Message?relay
     67              }
     68            }
     69          }
   \                     ??Uart0_Handle_6:
   \   000174   758214       MOV     DPL,#0x14
   \   000177   758302       MOV     DPH,#0x2
   \   00017A   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00017D                REQUIRE ?Subroutine0
   \   00017D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine5_0
   \   000004                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   12....       LCALL   ??strstr?relay
   \   000003   8B..         MOV     ?V0 + 1,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   12....       LCALL   ??strlen?relay
   \   00000D   EA           MOV     A,R2
   \   00000E   FC           MOV     R4,A
   \   00000F   EB           MOV     A,R3
   \   000010   FD           MOV     R5,A
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTWrite?relay
   \   000020   22           RET
     70          
     71          //Print short address and IEEE address from UART

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
   \                     PrintAddrInfo:
     73          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 47
   \   000005   74D1         MOV     A,#-0x2f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
     74              uint8 strIeeeAddr[17] = {0};
   \   00000E   741E         MOV     A,#0x1e
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {0}>_3` & 0xff
   \   00001D   7411         MOV     A,#0x11
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     75              char  buff[30] = {0};
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   7583..       MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
   \   00002F   7582..       MOV     DPL,#`?<Constant {0}>_4` & 0xff
   \   000032   741E         MOV     A,#0x1e
   \   000034   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     76          
     77              //print shortAddr to buff
     78              sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);
   \   000037                ; Setup parameters for call to function sprintf
   \   000037   8A..         MOV     ?V0 + 0,R2
   \   000039   8B..         MOV     ?V0 + 1,R3
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C..         MOV     R4,#`?<Constant "shortAddr:%04X   IEEE:">` & 0xff
   \   000042   7D..         MOV     R5,#(`?<Constant "shortAddr:%04X   IEEE:">` >> 8) & 0xff
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??sprintf?relay
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
     79          
     80              //print IEEE address to strIeeeAddr
     81              GetIeeeAddr(pIeeeAddr, strIeeeAddr);
   \   000055                ; Setup parameters for call to function GetIeeeAddr
   \   000055   741E         MOV     A,#0x1e
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AC82         MOV     R4,DPL
   \   00005C   AD83         MOV     R5,DPH
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??GetIeeeAddr?relay
     82          
     83              HalUARTWrite (SERIAL_APP_PORT, (uint8 *)buff, strlen(buff));
   \   000065                ; Setup parameters for call to function HalUARTWrite
   \   000065                ; Setup parameters for call to function strlen
   \   000065   12....       LCALL   ?Subroutine2 & 0xFFFF
     84              Delay_ms(10);
   \                     ??CrossCallReturnLabel_1:
   \   000068                ; Setup parameters for call to function Delay_ms
   \   000068   790A         MOV     R1,#0xa
   \   00006A   12....       LCALL   ??Delay_ms?relay
     85              HalUARTWrite (SERIAL_APP_PORT, strIeeeAddr, 16);
   \   00006D                ; Setup parameters for call to function HalUARTWrite
   \   00006D   7C10         MOV     R4,#0x10
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   741E         MOV     A,#0x1e
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   12....       LCALL   ??HalUARTWrite?relay
     86              HalUARTWrite (SERIAL_APP_PORT, "\r\n", 2);
   \   00007F                ; Setup parameters for call to function HalUARTWrite
   \   00007F   7C02         MOV     R4,#0x2
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000085   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000087   7900         MOV     R1,#0x0
   \   000089   12....       LCALL   ??HalUARTWrite?relay
     87          }
   \   00008C   742F         MOV     A,#0x2f
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   02....       LJMP    ?Subroutine0 & 0xFFFF
     88          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
   \                     GetIeeeAddr:
     90          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
     91            uint8 i;
     92            uint8 *xad = pIeeeAddr;
     93          
     94            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   000009   75..00       MOV     ?V0 + 0,#0x0
     95            {
     96              uint8 ch;
     97              ch = (*xad >> 4) & 0x0F;
   \                     ??GetIeeeAddr_0:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C4           SWAP    A
   \   000012   12....       LCALL   ?Subroutine3 & 0xFFFF
     98              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
   \                     ??CrossCallReturnLabel_2:
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   E5..         MOV     A,?V0 + 1
   \   00001B   C3           CLR     C
   \   00001C   940A         SUBB    A,#0xa
   \   00001E   5004         JNC     ??GetIeeeAddr_1
   \   000020   7E30         MOV     R6,#0x30
   \   000022   8002         SJMP    ??GetIeeeAddr_2
   \                     ??GetIeeeAddr_1:
   \   000024   7E37         MOV     R6,#0x37
   \                     ??GetIeeeAddr_2:
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
     99              i++;
    100              ch = *xad & 0x0F;
   \                     ??CrossCallReturnLabel_4:
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   12....       LCALL   ?Subroutine3 & 0xFFFF
    101              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    102              i++;
    103            }
   \                     ??CrossCallReturnLabel_3:
   \   000031   0C           INC     R4
   \   000032   AD83         MOV     R5,DPH
   \   000034   E5..         MOV     A,?V0 + 1
   \   000036   C3           CLR     C
   \   000037   940A         SUBB    A,#0xa
   \   000039   5004         JNC     ??GetIeeeAddr_3
   \   00003B   7E30         MOV     R6,#0x30
   \   00003D   8002         SJMP    ??GetIeeeAddr_4
   \                     ??GetIeeeAddr_3:
   \   00003F   7E37         MOV     R6,#0x37
   \                     ??GetIeeeAddr_4:
   \   000041   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000044   E8           MOV     A,R0
   \   000045   24FF         ADD     A,#-0x1
   \   000047   18           DEC     R0
   \   000048   E9           MOV     A,R1
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F9           MOV     R1,A
   \   00004C   E5..         MOV     A,?V0 + 0
   \   00004E   C3           CLR     C
   \   00004F   9410         SUBB    A,#0x10
   \   000051   40B9         JC      ??GetIeeeAddr_0
    104          }
   \   000053   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   25..         ADD     A,?V0 + 1
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   05..         INC     ?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   540F         ANL     A,#0xf
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   EC           MOV     A,R4
   \   000005   FA           MOV     R2,A
   \   000006   ED           MOV     A,R5
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
    105          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void Delay_ms(uint8 Time) // Delay for n ms
   \                     Delay_ms:
    107          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    108            unsigned char i;
    109            while(Time--)
   \                     ??Delay_ms_0:
   \   000007   8F..         MOV     ?V0 + 0,R7
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   25..         ADD     A,?V0 + 0
   \   00000D   1F           DEC     R7
   \   00000E   04           INC     A
   \   00000F   600F         JZ      ??Delay_ms_1
    110            {
    111              for(i=0;i<100;i++)
   \   000011   7E64         MOV     R6,#0x64
    112               MicroWait(10);
   \                     ??Delay_ms_2:
   \   000013                ; Setup parameters for call to function Onboard_wait
   \   000013   7A0A         MOV     R2,#0xa
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   ??Onboard_wait?relay
   \   00001A   1E           DEC     R6
   \   00001B   EE           MOV     A,R6
   \   00001C   60E9         JZ      ??Delay_ms_0
   \   00001E   80F3         SJMP    ??Delay_ms_2
    113            }
    114          }
   \                     ??Delay_ms_1:
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Uart0_Handle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Uart0_Handle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PrintAddrInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PrintAddrInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetIeeeAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetIeeeAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_ms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_ms

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000069   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000071   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000079   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000081   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000089   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000091   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000099   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F9   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000069   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000071   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000079   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000081   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000089   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000091   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000099   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F9   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C454400     DB "LED"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED1ON">`:
   \   000000   4C454431     DB "LED1ON"
   \            4F4E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED1OFF">`:
   \   000000   4C454431     DB "LED1OFF"
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED2ON">`:
   \   000000   4C454432     DB "LED2ON"
   \            4F4E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED2OFF">`:
   \   000000   4C454432     DB "LED2OFF"
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED3ON">`:
   \   000000   4C454433     DB "LED3ON"
   \            4F4E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED3OFF">`:
   \   000000   4C454433     DB "LED3OFF"
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT">`:
   \   000000   415400       DB "AT"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%*[^+]%*c%[^#]%*c%s">`:
   \   000000   252A5B5E     DB "%*[^+]%*c%[^#]%*c%s"
   \            2B5D252A
   \            63255B5E
   \            235D252A
   \            63257300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GETADDR">`:
   \   000000   47455441     DB "GETADDR"
   \            44445200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SelfshortAddr:%04X">`:
   \   000000   53656C66     DB "SelfshortAddr:%04X"
   \            73686F72
   \            74416464
   \            723A2530
   \            345800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "P2P">`:
   \   000000   50325000     DB "P2P"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BROADCAST">`:
   \   000000   42524F41     DB "BROADCAST"
   \            44434153
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GROUP">`:
   \   000000   47524F55     DB "GROUP"
   \            5000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_3`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_4`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "shortAddr:%04X   IEEE:">`:
   \   000000   73686F72     DB "shortAddr:%04X   IEEE:"
   \            74416464
   \            723A2530
   \            34582020
   \            20494545
   \            453A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay_ms                           0      0     66
       -> Onboard_wait                  0      0     18
     GetIeeeAddr                        1      0     67
     PrintAddrInfo                      2      0     59
       -> sprintf                       0      0    118
       -> GetIeeeAddr                   0      0    114
       -> strlen                        0      0    114
       -> HalUARTWrite                  0      0    114
       -> Delay_ms                      0      0    114
       -> HalUARTWrite                  0      0    114
       -> HalUARTWrite                  0      0    114
     Uart0_Handle                       2      0    546
       -> strstr                        0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> HalLedSet                     0      0   1084
       -> strstr                        0      0   1084
       -> sscanf                        0      0   1092
       -> strstr                        0      0   1084
       -> NLME_GetShortAddr             0      0   1084
       -> sprintf                       0      0   1088
       -> strlen                        0      0   1084
       -> HalUARTWrite                  0      0   1084
       -> strstr                        0      0   1084
       -> ZStackTest_Send_P2P_Message
                                        0      0   1084
       -> strstr                        0      0   1084
       -> ZStackTest_Send_Broadcast_Message
                                        0      0   1084
       -> strstr                        0      0   1084
       -> ZStackTest_Send_Group_Message
                                        0      0   1084


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     Uart0_Handle                          381
     ?Subroutine0                            5
     ?Subroutine1                            4
     ??Subroutine5_0                         9
     ?Subroutine2                           33
     PrintAddrInfo                         148
     GetIeeeAddr                            86
     ?Subroutine4                           11
     ?Subroutine3                           14
     Delay_ms                               37
     ??Uart0_Handle?relay                    6
     ??PrintAddrInfo?relay                   6
     ??GetIeeeAddr?relay                     6
     ??Delay_ms?relay                        6
     ?<Constant {0}>                       256
     ?<Constant {0}>_1                     256
     ?<Constant "LED">                       4
     ?<Constant "LED1ON">                    7
     ?<Constant "LED1OFF">                   8
     ?<Constant "LED2ON">                    7
     ?<Constant "LED2OFF">                   8
     ?<Constant "LED3ON">                    7
     ?<Constant "LED3OFF">                   8
     ?<Constant "AT">                        3
     ?<Constant "%*[^+]%*c%[^#]%*c%s">      20
     ?<Constant "GETADDR">                   8
     ?<Constant {0}>_2                      20
     ?<Constant "SelfshortAddr:%04X">       19
     ?<Constant "P2P">                       4
     ?<Constant "BROADCAST">                10
     ?<Constant "GROUP">                     6
     ?<Constant {0}>_3                      17
     ?<Constant {0}>_4                      30
     ?<Constant "shortAddr:%04X   IEEE:">   23
     ?<Constant "\r\n">                      3

 
 728 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
 724 bytes in segment XDATA_ROM_C
 
 752 bytes of CODE  memory
 724 bytes of CONST memory

Errors: none
Warnings: 2
