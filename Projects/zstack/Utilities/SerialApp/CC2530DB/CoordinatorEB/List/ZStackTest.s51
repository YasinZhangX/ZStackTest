///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        26/Nov/2017  01:25:37 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\Source\ZStackTest.c     /
//    Command line       =  -f D:\Zigbee\workspace\JustTry\ZStackTest\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wCoord.cfg (-DCPU32MHZ             /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\Zigbee\workspace\JustTry\ZStackTest\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Zigbee\workspace\JustTr /
//                          y\ZStackTest\Projects\zstack\Utilities\SerialApp\ /
//                          Source\ZStackTest.c -D HAL_UART=TRUE -D           /
//                          SERIAL_APP_PORT=0 -lC D:\Zigbee\workspace\JustTry /
//                          \ZStackTest\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\CoordinatorEB\List\ -lA                   /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\CoordinatorEB\ /
//                          List\ --diag_suppress Pe001,Pa010 -o              /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\CoordinatorEB\ /
//                          Obj\ -e --no_code_motion --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\ -I            /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\Source\ -I  /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\ZMain /
//                          \TI2530DB\ -I D:\Zigbee\workspace\JustTry\ZStackT /
//                          est\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\hal\include\ -I         /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\ -I               /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\ -I                       /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\ -I                    /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\ -I               /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\ -I   /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mt\ -I D:\Zigbee\workspace\JustTry\ZS /
//                          tackTest\Projects\zstack\Utilities\SerialApp\CC25 /
//                          30DB\..\..\..\..\..\Components\osal\include\ -I   /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\ -I                    /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\ -I                          /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\ -I                         /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\ -I                        /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                         /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\ -I                         /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\ -I                         /
//                          D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\ -I D:\Zigbee\workspace\JustTry\ /
//                          ZStackTest\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz   /
//                          --require_prototypes                              /
//    List file          =  D:\Zigbee\workspace\JustTry\ZStackTest\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\CoordinatorEB\ /
//                          List\ZStackTest.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZStackTest

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZStackTest_CallBack?relay,0203H
        FUNCTION ??ZStackTest_HandleKeys?relay,0203H
        PUBLIC ??ZStackTest_Init?relay
        FUNCTION ??ZStackTest_Init?relay,0203H
        PUBLIC ??ZStackTest_ProcessEvent?relay
        FUNCTION ??ZStackTest_ProcessEvent?relay,0203H
        FUNCTION ??ZStackTest_ProcessMSGCmd?relay,0203H
        FUNCTION ??ZStackTest_Send?relay,0203H
        PUBLIC ??ZStackTest_Send_Broadcast_Message?relay
        FUNCTION ??ZStackTest_Send_Broadcast_Message?relay,0203H
        PUBLIC ??ZStackTest_Send_Group_Message?relay
        FUNCTION ??ZStackTest_Send_Group_Message?relay,0203H
        PUBLIC ??ZStackTest_Send_P2P_Message?relay
        FUNCTION ??ZStackTest_Send_P2P_Message?relay,0203H
        FUNCTION ZStackTest_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZStackTest_ClusterList
        FUNCTION ZStackTest_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZStackTest_Init
        FUNCTION ZStackTest_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC ZStackTest_ProcessEvent
        FUNCTION ZStackTest_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        FUNCTION ZStackTest_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION ZStackTest_Send,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZStackTest_Send_Broadcast_Message
        FUNCTION ZStackTest_Send_Broadcast_Message,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZStackTest_Send_Group_Message
        FUNCTION ZStackTest_Send_Group_Message,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZStackTest_Send_P2P_Message
        FUNCTION ZStackTest_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZStackTest_SimpleDesc
        PUBLIC ZStackTest_TaskID
        PUBLIC ZStackTest_epDesc
        PUBWEAK _A_P0
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLedSet           SYMBOL "HalLedSet"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTWrite        SYMBOL "HalUARTWrite"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
PrintAddrInfo       SYMBOL "PrintAddrInfo"
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_set_event      SYMBOL "osal_set_event"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
HalUARTRead         SYMBOL "HalUARTRead"
Uart0_Handle        SYMBOL "Uart0_Handle"
osal_memset         SYMBOL "osal_memset"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetCoordExtAddr?relay SYMBOL "?relay", NLME_GetCoordExtAddr
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??PrintAddrInfo?relay SYMBOL "?relay", PrintAddrInfo
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??Uart0_Handle?relay SYMBOL "?relay", Uart0_Handle
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
ZStackTest_Init     SYMBOL "ZStackTest_Init"
??ZStackTest_Init?relay SYMBOL "?relay", ZStackTest_Init
ZStackTest_ProcessEvent SYMBOL "ZStackTest_ProcessEvent"
??ZStackTest_ProcessEvent?relay SYMBOL "?relay", ZStackTest_ProcessEvent
ZStackTest_Send_Broadcast_Message SYMBOL "ZStackTest_Send_Broadcast_Message"
??ZStackTest_Send_Broadcast_Message?relay SYMBOL "?relay", ZStackTest_Send_Broadcast_Message
ZStackTest_Send_Group_Message SYMBOL "ZStackTest_Send_Group_Message"
??ZStackTest_Send_Group_Message?relay SYMBOL "?relay", ZStackTest_Send_Group_Message
ZStackTest_Send_P2P_Message SYMBOL "ZStackTest_Send_P2P_Message"
??ZStackTest_Send_P2P_Message?relay SYMBOL "?relay", ZStackTest_Send_P2P_Message

        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PrintAddrInfo
        FUNCTION PrintAddrInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Uart0_Handle
        FUNCTION Uart0_Handle,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetCoordExtAddr?relay
        FUNCTION ??NLME_GetCoordExtAddr?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??PrintAddrInfo?relay
        FUNCTION ??PrintAddrInfo?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??Uart0_Handle?relay
        FUNCTION ??Uart0_Handle?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// D:\Zigbee\workspace\JustTry\ZStackTest\Projects\zstack\Utilities\SerialApp\Source\ZStackTest.c
//    1 /**************************************************************************************************
//    2   Filename:       ZStackTest.c
//    3   Revised:        $Date: 2009-03-29 10:51:47 -0700 (Sun, 29 Mar 2009) $
//    4   Revision:       $Revision: 19585 $
//    5 
//    6   Description -   Serial Transfer Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This sample application is basically a cable replacement
//   42   and it should be customized for your application. A PC
//   43   (or other device) sends data via the serial port to this
//   44   application's device.  This device transmits the message
//   45   to another device with the same application running. The
//   46   other device receives the over-the-air message and sends
//   47   it to a PC (or other device) connected to its serial port.
//   48 
//   49   This application doesn't have a profile, so it handles everything directly.
//   50 
//   51   Key control:
//   52     SW1:
//   53     SW2:  initiates end device binding
//   54     SW3:
//   55     SW4:  initiates a match description request
//   56 *********************************************************************/
//   57 
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 #include <string.h>
//   62 
//   63 #include "AF.h"
//   64 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1
//   65 #include "OSAL_Tasks.h"
//   66 #include "ZStackTest.h"
//   67 #include "ZDApp.h"
//   68 #include "ZDObject.h"
//   69 #include "ZDProfile.h"
//   70 #include "aps_groups.h"
//   71 
//   72 #include "hal_drivers.h"
//   73 #include "hal_key.h"
//   74 #if defined ( LCD_SUPPORTED )
//   75 #include "hal_lcd.h"
//   76 #endif
//   77 #include "hal_led.h"
//   78 #include "hal_uart.h"
//   79 
//   80 #include "uart.h"
//   81 
//   82 /*********************************************************************
//   83  * MACROS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * CONSTANTS
//   88  */
//   89 
//   90 #if !defined( SERIAL_APP_PORT )
//   91 #define SERIAL_APP_PORT  0
//   92 #endif
//   93 
//   94 #if !defined( SERIAL_APP_BAUD )
//   95 #define SERIAL_APP_BAUD  HAL_UART_BR_38400
//   96 //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
//   97 #endif
//   98 
//   99 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  100 #if !defined( SERIAL_APP_THRESH )
//  101 #define SERIAL_APP_THRESH  64
//  102 #endif
//  103 
//  104 #if !defined( SERIAL_APP_RX_SZ )
//  105 #define SERIAL_APP_RX_SZ  128
//  106 #endif
//  107 
//  108 #if !defined( SERIAL_APP_TX_SZ )
//  109 #define SERIAL_APP_TX_SZ  128
//  110 #endif
//  111 
//  112 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  113 #if !defined( SERIAL_APP_IDLE )
//  114 #define SERIAL_APP_IDLE  6
//  115 #endif
//  116 
//  117 // Loopback Rx bytes to Tx for throughput testing.
//  118 #if !defined( SERIAL_APP_LOOPBACK )
//  119 #define SERIAL_APP_LOOPBACK  FALSE
//  120 #endif
//  121 
//  122 // This is the max byte count per OTA message.
//  123 #if !defined( SERIAL_APP_TX_MAX )
//  124 #define SERIAL_APP_TX_MAX  80
//  125 #endif
//  126 
//  127 #define SERIAL_APP_RSP_CNT  4
//  128 
//  129 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  130 const cId_t ZStackTest_ClusterList[ZStackTest_MAX_CLUSTERS] =
ZStackTest_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//  131 {
//  132   ZStackTest_P2P_CLUSTERID,
//  133   ZStackTest_BROADCAST_CLUSTERID,
//  134   ZStackTest_GROUP_CLUSTERID,
//  135   ZStackTest_CLUSTERID2
//  136 };
//  137 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  138 const SimpleDescriptionFormat_t ZStackTest_SimpleDesc =
ZStackTest_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW ZStackTest_ClusterList
        DATA8
        DB 4
        DATA16
        DW ZStackTest_ClusterList
//  139 {
//  140   ZStackTest_ENDPOINT,              //  int   Endpoint;
//  141   ZStackTest_PROFID,                //  uint16 AppProfId[2];
//  142   ZStackTest_DEVICEID,              //  uint16 AppDeviceId[2];
//  143   ZStackTest_DEVICE_VERSION,        //  int   AppDevVer:4;
//  144   ZStackTest_FLAGS,                 //  int   AppFlags:4;
//  145   ZStackTest_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  146   (cId_t *)ZStackTest_ClusterList,  //  byte *pAppInClusterList;
//  147   ZStackTest_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  148   (cId_t *)ZStackTest_ClusterList   //  byte *pAppOutClusterList;
//  149 };
//  150 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  151 const endPointDesc_t ZStackTest_epDesc =
ZStackTest_epDesc:
        DB 11
        DATA16
        DW ZStackTest_TaskID
        DW ZStackTest_SimpleDesc
        DATA8
        DB 0
//  152 {
//  153   ZStackTest_ENDPOINT,
//  154   &ZStackTest_TaskID,
//  155   (SimpleDescriptionFormat_t *)&ZStackTest_SimpleDesc,
//  156   noLatencyReqs
//  157 };
//  158 
//  159 /*********************************************************************
//  160  * TYPEDEFS
//  161  */
//  162 
//  163 /*********************************************************************
//  164  * GLOBAL VARIABLES
//  165  */
//  166 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 uint8 ZStackTest_TaskID;    // Task ID for internal task/event processing.
ZStackTest_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  168 
//  169 /*********************************************************************
//  170  * EXTERNAL VARIABLES
//  171  */
//  172 
//  173 /*********************************************************************
//  174  * EXTERNAL FUNCTIONS
//  175  */
//  176 
//  177 /*********************************************************************
//  178  * LOCAL VARIABLES
//  179  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  180 static bool KeyFlag = 0;
KeyFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 static uint8 shift;
shift:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 static uint8 keys;
keys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 static uint8 ZStackTest_TransID;
ZStackTest_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 static afAddrType_t ZStackTest_TxAddr;
//  187 static uint8 ZStackTest_TxSeq;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 static uint8 ZStackTest_TxBuf[SERIAL_APP_TX_MAX+1];
ZStackTest_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  189 static uint8 ZStackTest_TxLen;
ZStackTest_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  190 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  191 static afAddrType_t ZStackTest_RxAddr;
ZStackTest_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 static uint8 ZStackTest_RxSeq;
ZStackTest_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  193 static uint8 ZStackTest_RspBuf[SERIAL_APP_RSP_CNT];
ZStackTest_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  194 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  195 static devStates_t ZStackTest_NwkState;
ZStackTest_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  196 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  197 static afAddrType_t ZStackTest_P2P_DstAddr;       //单播
ZStackTest_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 static afAddrType_t ZStackTest_Broadcast_DstAddr; //广播
ZStackTest_Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  199 static afAddrType_t ZStackTest_Group_DstAddr;     //组播
ZStackTest_Group_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  200 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  201 static aps_Group_t ZStackTest_Group;
ZStackTest_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  202 
//  203 /*********************************************************************
//  204  * LOCAL FUNCTIONS
//  205  */
//  206 
//  207 static void ZStackTest_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  208 static void ZStackTest_HandleKeys( uint8 shift, uint8 keys );
//  209 static void ZStackTest_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  210 static void ZStackTest_Send(void);
//  211 static void ZStackTest_Resp(void);
//  212 static void ZStackTest_CallBack(uint8 port, uint8 event);
//  213 static void AddressInit(void);
//  214 
//  215 /*********************************************************************
//  216  * @fn      ZStackTest_Init
//  217  *
//  218  * @brief   This is called during OSAL tasks' initialization.
//  219  *
//  220  * @param   task_id - the Task ID assigned by OSAL.
//  221  *
//  222  * @return  none
//  223  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 void ZStackTest_Init( uint8 task_id )
ZStackTest_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZStackTest_Init
        CODE
//  225 {
        FUNCALL ZStackTest_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
        MOV     R6,A
//  226   halUARTCfg_t uartConfig;
//  227 
//  228   ZStackTest_TaskID = task_id;
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    @DPTR,A
//  229   ZStackTest_RxSeq = 0xC3;
        MOV     DPTR,#ZStackTest_RxSeq
        MOV     A,#-0x3d
        MOVX    @DPTR,A
//  230   ZStackTest_TransID = 0;
        MOV     DPTR,#ZStackTest_TransID
        CLR     A
        MOVX    @DPTR,A
//  231 
//  232   AddressInit();
        MOV     DPTR,#ZStackTest_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_Broadcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_Broadcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_Group_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_Group_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#ZStackTest_Group
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group1">` >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(ZStackTest_Group + 3) & 0xff
        MOV     R3,#((ZStackTest_Group + 3) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#ZStackTest_Group & 0xff
        MOV     R3,#(ZStackTest_Group >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??aps_AddGroup?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  233 
//  234   afRegister( (endPointDesc_t *)&ZStackTest_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ZStackTest_epDesc & 0xff
        MOV     R3,#(ZStackTest_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  235 
//  236   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  237 
//  238   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  239   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  240   uartConfig.flowControl          = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  241   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  242   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  243   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  244   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  245   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  246   uartConfig.callBackFunc         = ZStackTest_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??ZStackTest_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZStackTest_CallBack?relay >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  247   HalUARTOpen (SERIAL_APP_PORT, &uartConfig);
??CrossCallReturnLabel_4:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  248   HalUARTWrite(SERIAL_APP_PORT, "Init Uart0\r\n", sizeof("Init Uart0\r\n")-1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Init Uart0\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Init Uart0\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  249 
//  250 #if defined ( LCD_SUPPORTED )
//  251   HalLcdWriteString( "ZStackTest", HAL_LCD_LINE_2 );
//  252 #endif
//  253 
//  254   ZDO_RegisterForZDOMsg( ZStackTest_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  255   ZDO_RegisterForZDOMsg( ZStackTest_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  256 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  257 
//  258 /*********************************************************************
//  259  * @fn      ZStackTest_ProcessEvent
//  260  *
//  261  * @brief   Generic Application Task event processor.
//  262  *
//  263  * @param   task_id  - The OSAL assigned task ID.
//  264  * @param   events   - Bit map of events to process.
//  265  *
//  266  * @return  Event flags of all unprocessed events.
//  267  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  268 UINT16 ZStackTest_ProcessEvent( uint8 task_id, UINT16 events )
ZStackTest_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZStackTest_ProcessEvent
        CODE
//  269 {
        FUNCALL ZStackTest_ProcessEvent, ZStackTest_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, ZStackTest_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, PrintAddrInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, PrintAddrInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, ZStackTest_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessEvent, ZStackTest_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  270   (void)task_id;  // Intentionally unreferenced parameter
//  271   uint8* pIeeeAddr = NULL;
//  272 
//  273   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     ??ZStackTest_ProcessEvent_0
//  274   {
//  275     afIncomingMSGPacket_t *MSGpkt;
//  276 
//  277     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( ZStackTest_TaskID )) )
//  278     {
//  279       switch ( MSGpkt->hdr.event )
//  280       {
//  281       case ZDO_STATE_CHANGE:
//  282               ZStackTest_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  283               if ( (ZStackTest_NwkState == DEV_ZB_COORD)
//  284                   || (ZStackTest_NwkState == DEV_ROUTER)
//  285                   || (ZStackTest_NwkState == DEV_END_DEVICE) )
//  286               {
//  287               	HalUARTWrite(SERIAL_APP_PORT, "Connect!", 8);
//  288 				        HalUARTWrite (SERIAL_APP_PORT, "\r\n", 2);
//  289                 HalUARTWrite(SERIAL_APP_PORT, "Self:   ", 8);
//  290       		      PrintAddrInfo(NLME_GetShortAddr(), NLME_GetExtAddr());
//  291       		      HalUARTWrite(SERIAL_APP_PORT, "Parent: ", 8);
//  292       		      NLME_GetCoordExtAddr(pIeeeAddr);
//  293       		      PrintAddrInfo(NLME_GetCoordShortAddr(), pIeeeAddr);
//  294               }
//  295 		break;
//  296       case ZDO_CB_MSG:
//  297         //ZStackTest_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  298         break;
//  299 
//  300       case KEY_CHANGE:
//  301         ZStackTest_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  302         shift = ((keyChange_t *)MSGpkt)->state;
//  303         keys = ((keyChange_t *)MSGpkt)->keys;
//  304         break;
//  305 
//  306       case AF_INCOMING_MSG_CMD:
//  307         ZStackTest_ProcessMSGCmd( MSGpkt );
//  308         break;
//  309 
//  310       default:
//  311         break;
//  312       }
//  313 
//  314       osal_msg_deallocate( (uint8 *)MSGpkt );
//  315     }
//  316 
//  317     return ( events ^ SYS_EVENT_MSG );
//  318   }
//  319 
//  320   if ( events & ZStackTest_SEND_EVT )
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??ZStackTest_ProcessEvent_1 & 0xFFFF
//  321   {
//  322     ZStackTest_Send();
        ; Setup parameters for call to function ZStackTest_Send
        LCALL   ??ZStackTest_Send?relay
//  323     return ( events ^ ZStackTest_SEND_EVT );
        MOV     A,?V0 + 0
        XRL     A,#0x1
??ZStackTest_ProcessEvent_2:
        MOV     R2,A
        MOV     R3,?V0 + 1
        LJMP    ??ZStackTest_ProcessEvent_3 & 0xFFFF
//  324   }
??ZStackTest_ProcessEvent_4:
        ; Setup parameters for call to function ZStackTest_ProcessMSGCmd
        LCALL   ??ZStackTest_ProcessMSGCmd?relay
??ZStackTest_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_msg_deallocate?relay
??ZStackTest_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??ZStackTest_ProcessEvent_6 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??ZStackTest_ProcessEvent_4
        ADD     A,#0x5a
        JZ      ??ZStackTest_ProcessEvent_7
        ADD     A,#-0x11
        JNZ     ??ZStackTest_ProcessEvent_5
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#ZStackTest_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??ZStackTest_ProcessEvent_8
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??ZStackTest_ProcessEvent_8
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZStackTest_ProcessEvent_5
??ZStackTest_ProcessEvent_8:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Connect!">` & 0xff
        MOV     R3,#(`?<Constant "Connect!">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Self:   ">` & 0xff
        MOV     R3,#(`?<Constant "Self:   ">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        ; Setup parameters for call to function PrintAddrInfo
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        SJMP    ??ZStackTest_ProcessEvent_5
??ZStackTest_ProcessEvent_7:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        ADD     A,#0x3
        INC     R0
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        ; Setup parameters for call to function ZStackTest_HandleKeys
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZStackTest_HandleKeys?relay
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPTR,#shift
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     DPTR,#keys
        MOVX    @DPTR,A
        LJMP    ??ZStackTest_ProcessEvent_5 & 0xFFFF
??ZStackTest_ProcessEvent_6:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??ZStackTest_ProcessEvent_3
//  325 
//  326   if ( events & ZStackTest_RESP_EVT )
??ZStackTest_ProcessEvent_1:
        ANL     A,#0x2
        JZ      ??ZStackTest_ProcessEvent_9
//  327   {
//  328     ZStackTest_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 2,#ZStackTest_TransID & 0xff
        MOV     ?V0 + 3,#(ZStackTest_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 2,#ZStackTest_RspBuf & 0xff
        MOV     ?V0 + 3,#(ZStackTest_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0x0
        MOV     R4,#ZStackTest_epDesc & 0xff
        MOV     R5,#(ZStackTest_epDesc >> 8) & 0xff
        MOV     R2,#ZStackTest_RxAddr & 0xff
        MOV     R3,#(ZStackTest_RxAddr >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??ZStackTest_ProcessEvent_10
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  329     return ( events ^ ZStackTest_RESP_EVT );
??ZStackTest_ProcessEvent_10:
        MOV     A,?V0 + 0
        XRL     A,#0x2
        LJMP    ??ZStackTest_ProcessEvent_2 & 0xFFFF
//  330   }
//  331 
//  332   if (events & ZStackTest_KEY_PRESS_EVT)
??ZStackTest_ProcessEvent_9:
        MOV     A,R2
        ANL     A,#0x4
        JZ      ??ZStackTest_ProcessEvent_11
//  333   {
//  334     ZStackTest_HandleKeys( shift, keys );
        ; Setup parameters for call to function ZStackTest_HandleKeys
        MOV     DPTR,#keys
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#shift
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZStackTest_HandleKeys?relay
//  335     return ( events ^ ZStackTest_KEY_PRESS_EVT );
        MOV     A,?V0 + 0
        XRL     A,#0x4
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??ZStackTest_ProcessEvent_3
//  336   }
//  337 
//  338   return ( 0 );  // Discard unknown events.
??ZStackTest_ProcessEvent_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZStackTest_ProcessEvent_3:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  339 }
//  340 
//  341 /*********************************************************************
//  342  * @fn      ZStackTest_ProcessZDOMsgs()
//  343  *
//  344  * @brief   Process response messages
//  345  *
//  346  * @param   none
//  347  *
//  348  * @return  none
//  349  */
//  350 static void ZStackTest_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  351 {
//  352   switch ( inMsg->clusterID )
//  353   {
//  354   case End_Device_Bind_rsp:
//  355     if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  356     {
//  357       // Light LED
//  358       HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  359     }
//  360 #if defined(BLINK_LEDS)
//  361     else
//  362     {
//  363       // Flash LED to show failure
//  364       HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  365     }
//  366 #endif
//  367     break;
//  368 
//  369   case Match_Desc_rsp:
//  370   {
//  371     ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  372     if ( pRsp )
//  373     {
//  374       if ( pRsp->status == ZSuccess && pRsp->cnt )
//  375       {
//  376         ZStackTest_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  377         ZStackTest_TxAddr.addr.shortAddr = pRsp->nwkAddr;
//  378         // Take the first endpoint, Can be changed to search through endpoints
//  379         ZStackTest_TxAddr.endPoint = pRsp->epList[0];
//  380 
//  381         // Light LED
//  382         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  383       }
//  384       osal_mem_free( pRsp );
//  385     }
//  386   }
//  387   break;
//  388   }
//  389 }
//  390 
//  391 /*********************************************************************
//  392  * @fn      ZStackTest_HandleKeys
//  393  *
//  394  * @brief   Handles all key events for this device.
//  395  *
//  396  * @param   shift - true if in shift/alt.
//  397  * @param   keys  - bit field for key events.
//  398  *
//  399  * @return  none
//  400  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 void ZStackTest_HandleKeys( uint8 shift, uint8 keys )
ZStackTest_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZStackTest_HandleKeys
        CODE
//  402 {
        FUNCALL ZStackTest_HandleKeys, ZStackTest_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, PrintAddrInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, PrintAddrInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 3,R2
//  403   uint8* pIeeeAddr = NULL;
//  404   zAddrType_t txAddr;
//  405 
//  406   if ( shift )
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZStackTest_HandleKeys_0 & 0xFFFF
//  407   {
//  408     if ( keys & HAL_KEY_SW_6 )
        MOV     A,R2
        MOV     C,0xE0 /* A   */.5
        JNC     ??ZStackTest_HandleKeys_1
//  409     {
//  410       #if FIRST_PART
//  411         HalLedSet(HAL_LED_1, HAL_LED_MODE_TOGGLE);
//  412         if(KeyFlag == 0)
//  413         {
//  414           KeyFlag = 1;
//  415           osal_start_timerEx( ZStackTest_TaskID,
//  416                               ZStackTest_KEY_PRESS_EVT,
//  417                               ZStackTest_KEY_PRESS_DELAY );
//  418         }
//  419         else
//  420         {
//  421           KeyFlag = 0;
//  422           if (HAL_PUSH_BUTTON1()) {
//  423             HalUARTWrite(SERIAL_APP_PORT, "Self:   ", 8);
//  424             PrintAddrInfo(NLME_GetShortAddr(), NLME_GetExtAddr());
//  425             HalUARTWrite(SERIAL_APP_PORT, "Parent: ", 8);
//  426             NLME_GetCoordExtAddr(pIeeeAddr);
//  427             PrintAddrInfo(NLME_GetCoordShortAddr(), pIeeeAddr);
//  428             (void) shift;
//  429             (void) keys;
//  430           }
//  431           osal_stop_timerEx(ZStackTest_TaskID, ZStackTest_KEY_PRESS_EVT);
//  432         }
//  433       #elif (SECOND_PART)
//  434         ZStackTest_Send_P2P_Message();
        ; Setup parameters for call to function ZStackTest_Send_P2P_Message
        LCALL   ??ZStackTest_Send_P2P_Message?relay
//  435         //ZStackTest_Send_Broadcast_Message();
//  436         //ZStackTest_Send_Group_Message();
//  437         if(KeyFlag == 0)
        MOV     DPTR,#KeyFlag
        MOVX    A,@DPTR
        JNZ     ??ZStackTest_HandleKeys_2
//  438         {
//  439           KeyFlag = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  440           osal_start_timerEx( ZStackTest_TaskID,
//  441                               ZStackTest_KEY_PRESS_EVT,
//  442                               ZStackTest_KEY_PRESS_DELAY );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x24
        MOV     R5,#0x5
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??ZStackTest_HandleKeys_1
//  443         }
//  444         else
//  445         {
//  446           KeyFlag = 0;
??ZStackTest_HandleKeys_2:
        CLR     A
        MOVX    @DPTR,A
//  447           if (HAL_PUSH_BUTTON1()) {
        MOV     C,0x80.1
        JC      ??ZStackTest_HandleKeys_3
//  448             aps_Group_t *grp;
//  449             grp = aps_FindGroup( ZStackTest_ENDPOINT, ZStackTest_GROUP );
//  450             if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,A
        MOV     R1,#0xb
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??ZStackTest_HandleKeys_4
//  451             {
//  452               // Remove from the group
//  453               aps_RemoveGroup( ZStackTest_ENDPOINT, ZStackTest_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0xb
        LCALL   ??aps_RemoveGroup?relay
//  454               HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??ZStackTest_HandleKeys_5
//  455             }
//  456             else
//  457             {
//  458               // Add to the flash group
//  459               aps_AddGroup( ZStackTest_ENDPOINT, &ZStackTest_Group );
??ZStackTest_HandleKeys_4:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#ZStackTest_Group & 0xff
        MOV     R3,#(ZStackTest_Group >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??aps_AddGroup?relay
//  460               HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??ZStackTest_HandleKeys_5:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  461             }
//  462             (void) shift;
//  463             (void) keys;
//  464           }
//  465           osal_stop_timerEx(ZStackTest_TaskID, ZStackTest_KEY_PRESS_EVT);
??ZStackTest_HandleKeys_3:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZStackTest_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  466         }
//  467       #endif
//  468     }
//  469     if ( keys & HAL_KEY_SW_1 )
??ZStackTest_HandleKeys_1:
        MOV     A,?V0 + 3
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??ZStackTest_HandleKeys_6 & 0xFFFF
//  470     {
//  471       HalUARTWrite(SERIAL_APP_PORT, "Self:   ", 8);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Self:   ">` & 0xff
        MOV     R3,#(`?<Constant "Self:   ">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  472       PrintAddrInfo(NLME_GetShortAddr(), NLME_GetExtAddr());
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        ; Setup parameters for call to function PrintAddrInfo
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ?Subroutine1 & 0xFFFF
//  473       HalUARTWrite(SERIAL_APP_PORT, "Parent: ", 8);
//  474       NLME_GetCoordExtAddr(pIeeeAddr);
//  475       PrintAddrInfo(NLME_GetCoordShortAddr(), pIeeeAddr);
//  476     }
//  477     if ( keys & HAL_KEY_SW_2 )
//  478     {
//  479     }
//  480     if ( keys & HAL_KEY_SW_3 )
//  481     {
//  482     }
//  483     if ( keys & HAL_KEY_SW_4 )
//  484     {
//  485     }
//  486   }
??CrossCallReturnLabel_1:
        LJMP    ??ZStackTest_HandleKeys_6 & 0xFFFF
//  487   else
//  488   {
//  489     if ( keys & HAL_KEY_SW_1 )
//  490     {
//  491     }
//  492 
//  493     if ( keys & HAL_KEY_SW_2 )
??ZStackTest_HandleKeys_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZStackTest_HandleKeys_7
//  494     {
//  495       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  496 
//  497       // Initiate an End Device Bind Request for the mandatory endpoint
//  498       txAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
//  499       txAddr.addr.shortAddr = 0x0000; // Coordinator
//  500       ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(),
//  501                             ZStackTest_epDesc.endPoint,
//  502                             ZStackTest_PROFID,
//  503                             ZStackTest_MAX_CLUSTERS, (cId_t *)ZStackTest_ClusterList,
//  504                             ZStackTest_MAX_CLUSTERS, (cId_t *)ZStackTest_ClusterList,
//  505                             FALSE );
//  506     }
??CrossCallReturnLabel_5:
        CLR     A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 4,#0x4
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xb
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  507 
//  508     if ( keys & HAL_KEY_SW_3 )
//  509     {
//  510     }
//  511 
//  512     if ( keys & HAL_KEY_SW_4 )
??ZStackTest_HandleKeys_7:
        MOV     A,?V0 + 3
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZStackTest_HandleKeys_6
//  513     {
//  514       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  515 
//  516       // Initiate a Match Description Request (Service Discovery)
//  517       txAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        LCALL   ?Subroutine3 & 0xFFFF
//  518       txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  519       ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
//  520                         ZStackTest_PROFID,
//  521                         ZStackTest_MAX_CLUSTERS, (cId_t *)ZStackTest_ClusterList,
//  522                         ZStackTest_MAX_CLUSTERS, (cId_t *)ZStackTest_ClusterList,
//  523                         FALSE );
//  524     }
//  525   }
??CrossCallReturnLabel_6:
        MOV     A,#-0x1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 4,#0x4
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x4
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  526 }
??ZStackTest_HandleKeys_6:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#ZStackTest_ClusterList & 0xff
        MOV     ?V0 + 1,#(ZStackTest_ClusterList >> 8) & 0xff
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ??PrintAddrInfo?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Parent: ">` & 0xff
        MOV     R3,#(`?<Constant "Parent: ">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_GetCoordExtAddr?relay
        ; Setup parameters for call to function PrintAddrInfo
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        ; Setup parameters for call to function PrintAddrInfo
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ??PrintAddrInfo?relay
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  527 
//  528 /*********************************************************************
//  529  * @fn      ZStackTest_ProcessMSGCmd
//  530  *
//  531  * @brief   Data message processor callback. This function processes
//  532  *          any incoming data - probably from other devices. Based
//  533  *          on the cluster ID, perform the intended action.
//  534  *
//  535  * @param   pkt - pointer to the incoming message packet
//  536  *
//  537  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  538  *          FALSE otherwise.
//  539  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 void ZStackTest_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
ZStackTest_ProcessMSGCmd:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZStackTest_ProcessMSGCmd
        CODE
//  541 {
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  542   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for ZStackTest_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZStackTest_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZStackTest_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZStackTest_ProcessMSGCmd_2
        CODE
//  543   {
//  544   // Process P2P message
//  545   case ZStackTest_P2P_CLUSTERID:
//  546     HalUARTWrite(SERIAL_APP_PORT, "Rx(p2p):", 8);     //提示接收到数��?
??ZStackTest_ProcessMSGCmd_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Rx(p2p):">` & 0xff
        MOV     R3,#(`?<Constant "Rx(p2p):">` >> 8) & 0xff
        SJMP    ??ZStackTest_ProcessMSGCmd_3
//  547     HalUARTWrite(SERIAL_APP_PORT, pkt->cmd.Data, pkt->cmd.DataLength); // 串口输出接收到的数据
//  548     HalUARTWrite(SERIAL_APP_PORT, "\r\n", 2);      // 回车换行
//  549     break;
//  550 
//  551   // Process broadcast message
//  552   case ZStackTest_BROADCAST_CLUSTERID:
//  553     HalUARTWrite(SERIAL_APP_PORT, "Rx(broadcast):", 14);   //提示接收到数��?
??ZStackTest_ProcessMSGCmd_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Rx(broadcast):">` & 0xff
        MOV     R3,#(`?<Constant "Rx(broadcast):">` >> 8) & 0xff
        SJMP    ??ZStackTest_ProcessMSGCmd_3
//  554     HalUARTWrite(SERIAL_APP_PORT, pkt->cmd.Data, pkt->cmd.DataLength); // 串口输出接收到的数据
//  555     HalUARTWrite(SERIAL_APP_PORT, "\r\n", 2);      // 回车换行
//  556     break;
//  557 
//  558   // Process group messages
//  559   case ZStackTest_GROUP_CLUSTERID:
//  560     HalUARTWrite(SERIAL_APP_PORT, "Rx(group):", 10); //提示接收到数��?
??ZStackTest_ProcessMSGCmd_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Rx(group):">` & 0xff
        MOV     R3,#(`?<Constant "Rx(group):">` >> 8) & 0xff
??ZStackTest_ProcessMSGCmd_3:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  561     HalUARTWrite(SERIAL_APP_PORT, pkt->cmd.Data, pkt->cmd.DataLength); // 串口输出接收到的数据
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine2 & 0xFFFF
//  562     HalUARTWrite(SERIAL_APP_PORT, "\r\n", 2);      // 回车换行
//  563     break;
//  564 
//  565   default:
//  566     break;
//  567   }
//  568 }
??CrossCallReturnLabel_3:
        LJMP    ??Subroutine6_0 & 0xFFFF
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  569 
//  570 /*********************************************************************
//  571  * @fn      ZStackTest_Send
//  572  *
//  573  * @brief   Send data OTA.
//  574  *
//  575  * @param   none
//  576  *
//  577  * @return  none
//  578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 static void ZStackTest_Send(void)
ZStackTest_Send:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function ZStackTest_Send
        CODE
//  580 {
        FUNCALL ZStackTest_Send, HalUARTRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Send, Uart0_Handle
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZStackTest_Send, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  581 #if SERIAL_APP_LOOPBACK
//  582   if (ZStackTest_TxLen < SERIAL_APP_TX_MAX)
//  583   {
//  584     ZStackTest_TxLen += HalUARTRead(SERIAL_APP_PORT, ZStackTest_TxBuf+ZStackTest_TxLen+1,
//  585                                     SERIAL_APP_TX_MAX-ZStackTest_TxLen);
//  586   }
//  587 
//  588   if (ZStackTest_TxLen)
//  589   {
//  590     (void)ZStackTest_TxAddr;
//  591     if (HalUARTWrite(SERIAL_APP_PORT, ZStackTest_TxBuf+1, ZStackTest_TxLen))
//  592     {
//  593       ZStackTest_TxLen = 0;
//  594     }
//  595     else
//  596     {
//  597       osal_set_event(ZStackTest_TaskID, ZStackTest_SEND_EVT);
//  598     }
//  599   }
//  600 #else
//  601   if (!ZStackTest_TxLen &&
//  602       (ZStackTest_TxLen = HalUARTRead(SERIAL_APP_PORT, ZStackTest_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#ZStackTest_TxLen
        MOVX    A,@DPTR
        JNZ     ??ZStackTest_Send_0
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#ZStackTest_TxBuf & 0xff
        MOV     R3,#(ZStackTest_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#ZStackTest_TxLen
        MOVX    @DPTR,A
//  603   {
//  604     // Pre-pend sequence number to the Tx message.
//  605     //ZStackTest_TxBuf[0] = ++ZStackTest_TxSeq;
//  606   }
//  607 
//  608   if (ZStackTest_TxLen)
??ZStackTest_Send_0:
        MOVX    A,@DPTR
        JZ      ??ZStackTest_Send_1
//  609   {
//  610     Uart0_Handle(ZStackTest_TxBuf);
        ; Setup parameters for call to function Uart0_Handle
        MOV     R2,#ZStackTest_TxBuf & 0xff
        MOV     R3,#(ZStackTest_TxBuf >> 8) & 0xff
        LCALL   ??Uart0_Handle?relay
//  611     osal_memset(ZStackTest_TxBuf, 0, SERIAL_APP_RX_SZ);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#ZStackTest_TxBuf & 0xff
        MOV     R3,#(ZStackTest_TxBuf >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  612     ZStackTest_TxLen = 0;
        MOV     DPTR,#ZStackTest_TxLen
        CLR     A
        MOVX    @DPTR,A
//  613   }
//  614 #endif
//  615 }
??ZStackTest_Send_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock17
//  616 
//  617 /*********************************************************************
//  618  * @fn      ZStackTest_Resp
//  619  *
//  620  * @brief   Send data OTA.
//  621  *
//  622  * @param   none
//  623  *
//  624  * @return  none
//  625  */
//  626 static void ZStackTest_Resp(void)
//  627 {
//  628   if (afStatus_SUCCESS != AF_DataRequest(&ZStackTest_RxAddr,
//  629                                          (endPointDesc_t *)&ZStackTest_epDesc,
//  630                                          ZStackTest_CLUSTERID2,
//  631                                          SERIAL_APP_RSP_CNT, ZStackTest_RspBuf,
//  632                                          &ZStackTest_TransID, 0, AF_DEFAULT_RADIUS))
//  633   {
//  634     osal_set_event(ZStackTest_TaskID, ZStackTest_RESP_EVT);
//  635   }
//  636 }
//  637 
//  638 /*********************************************************************
//  639  * @fn      ZStackTest_CallBack
//  640  *
//  641  * @brief   Send data OTA.
//  642  *
//  643  * @param   port - UART port.
//  644  * @param   event - the UART port event flag.
//  645  *
//  646  * @return  none
//  647  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  648 static void ZStackTest_CallBack(uint8 port, uint8 event)
ZStackTest_CallBack:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ZStackTest_CallBack
        CODE
//  649 {
        FUNCALL ZStackTest_CallBack, ZStackTest_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  650   (void)port;
//  651 
//  652   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  653 #if SERIAL_APP_LOOPBACK
//  654       (ZStackTest_TxLen < SERIAL_APP_TX_MAX))
//  655 #else
//  656       !ZStackTest_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??ZStackTest_CallBack_0
        MOV     DPTR,#ZStackTest_TxLen
        MOVX    A,@DPTR
        JNZ     ??ZStackTest_CallBack_0
//  657 #endif
//  658   {
//  659     ZStackTest_Send();
        ; Setup parameters for call to function ZStackTest_Send
        LCALL   ??ZStackTest_Send?relay
//  660   }
//  661 }
??ZStackTest_CallBack_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
//  662 
//  663 /*********************************************************************
//  664  * @fn      AddressInit
//  665  *
//  666  * @brief   set address
//  667  *
//  668  * @param   none
//  669  *
//  670  * @return  none
//  671  */
//  672 void AddressInit()
//  673 {
//  674   ZStackTest_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //单播
//  675   ZStackTest_P2P_DstAddr.endPoint = ZStackTest_ENDPOINT;
//  676   ZStackTest_P2P_DstAddr.addr.shortAddr = 0x0000;            //发给协调��?
//  677 
//  678   ZStackTest_Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//广播
//  679   ZStackTest_Broadcast_DstAddr.endPoint = ZStackTest_ENDPOINT;
//  680   ZStackTest_Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  681 
//  682   // Setup for the flash command's destination address - Group 1
//  683   ZStackTest_Group_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//组播
//  684   ZStackTest_Group_DstAddr.endPoint = ZStackTest_ENDPOINT;
//  685   ZStackTest_Group_DstAddr.addr.shortAddr = ZStackTest_GROUP;
//  686 
//  687   // Assign to group 1
//  688   ZStackTest_Group.ID = 0x0001;
//  689   ZStackTest_Group.name[0] = 6; // First byte is string length
//  690   osal_memcpy( &(ZStackTest_Group.name[1]), "Group1", 6);
//  691   aps_AddGroup( ZStackTest_ENDPOINT, &ZStackTest_Group );
//  692   HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
//  693 }
//  694 
//  695 /*********************************************************************
//  696  * @fn      ZStackTest_Send_P2P_Message
//  697  *
//  698  * @brief   point to point.
//  699  *
//  700  * @param   none
//  701  *
//  702  * @return  none
//  703  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  704 void ZStackTest_Send_P2P_Message( void )
ZStackTest_Send_P2P_Message:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZStackTest_Send_P2P_Message
        CODE
//  705 {
        FUNCALL ZStackTest_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  706   uint8 data[12]="p2p_message";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "p2p_message">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "p2p_message">` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  707 
//  708   if ( AF_DataRequest( &ZStackTest_P2P_DstAddr,
//  709                        (endPointDesc_t *)&ZStackTest_epDesc,
//  710                        ZStackTest_P2P_CLUSTERID,
//  711                        11,
//  712                        data,
//  713                        &ZStackTest_TransID,
//  714                        AF_DISCV_ROUTE,
//  715                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#ZStackTest_TransID & 0xff
        MOV     ?V0 + 1,#(ZStackTest_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#ZStackTest_epDesc & 0xff
        MOV     R5,#(ZStackTest_epDesc >> 8) & 0xff
        MOV     R2,#ZStackTest_P2P_DstAddr & 0xff
        MOV     R3,#(ZStackTest_P2P_DstAddr >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  716   {
//  717   }
//  718   else
//  719   {
//  720     // Error occurred in request to send.
//  721   }
//  722 }
        MOV     A,#0xc
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  723 
//  724 /*********************************************************************
//  725  * @fn      ZStackTest_Send_Broadcast_Message
//  726  *
//  727  * @brief   Send the broadcast message.
//  728  *
//  729  * @param   none
//  730  *
//  731  * @return  none
//  732  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  733 void ZStackTest_Send_Broadcast_Message( void )
ZStackTest_Send_Broadcast_Message:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZStackTest_Send_Broadcast_Message
        CODE
//  734 {
        FUNCALL ZStackTest_Send_Broadcast_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  735   uint8 data[] = "broadcast_message";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "broadcast_message">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "broadcast_message">` & 0xff
        MOV     A,#0x12
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  736   if ( AF_DataRequest( &ZStackTest_Broadcast_DstAddr, (endPointDesc_t *)&ZStackTest_epDesc,
//  737                        ZStackTest_BROADCAST_CLUSTERID,
//  738                        17,
//  739                        data,
//  740                        &ZStackTest_TransID,
//  741                        AF_DISCV_ROUTE,
//  742                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#ZStackTest_TransID & 0xff
        MOV     ?V0 + 1,#(ZStackTest_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x20
        MOV     R4,#ZStackTest_epDesc & 0xff
        MOV     R5,#(ZStackTest_epDesc >> 8) & 0xff
        MOV     R2,#ZStackTest_Broadcast_DstAddr & 0xff
        MOV     R3,#(ZStackTest_Broadcast_DstAddr >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  743   {
//  744   }
//  745   else
//  746   {
//  747     // Error occurred in request to send.
//  748   }
//  749 }
        MOV     A,#0x12
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  750 
//  751 /*********************************************************************
//  752  * @fn      ZStackTest_Send_Group_Message
//  753  *
//  754  * @brief   Send the group message to group 1.
//  755  *
//  756  * @param   flashTime - in milliseconds
//  757  *
//  758  * @return  none
//  759  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  760 void ZStackTest_Send_Group_Message( void )
ZStackTest_Send_Group_Message:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function ZStackTest_Send_Group_Message
        CODE
//  761 {
        FUNCALL ZStackTest_Send_Group_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  762   uint8 data[] = "group_message";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "group_message">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "group_message">` & 0xff
        MOV     A,#0xe
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  763 
//  764   if ( AF_DataRequest( &ZStackTest_Group_DstAddr, (endPointDesc_t *)&ZStackTest_epDesc,
//  765                        ZStackTest_GROUP_CLUSTERID,
//  766                        13,
//  767                        data,
//  768                        &ZStackTest_TransID,
//  769                        AF_DISCV_ROUTE,
//  770                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#ZStackTest_TransID & 0xff
        MOV     ?V0 + 1,#(ZStackTest_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0xd
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,#0x20
        MOV     R4,#ZStackTest_epDesc & 0xff
        MOV     R5,#(ZStackTest_epDesc >> 8) & 0xff
        MOV     R2,#ZStackTest_Group_DstAddr & 0xff
        MOV     R3,#(ZStackTest_Group_DstAddr >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  771   {
//  772   }
//  773   else
//  774   {
//  775     // Error occurred in request to send.
//  776   }
//  777 }
        MOV     A,#0xe
        CFI EndBlock cfiBlock26
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock27
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock28

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_Send_P2P_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_Send_Broadcast_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_Send_Broadcast_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZStackTest_Send_Group_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZStackTest_Send_Group_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Init Uart0\\r\\n">`:
        DB "Init Uart0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Connect!">`:
        DB "Connect!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Self:   ">`:
        DB "Self:   "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Parent: ">`:
        DB "Parent: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Rx(p2p):">`:
        DB "Rx(p2p):"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Rx(broadcast):">`:
        DB "Rx(broadcast):"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Rx(group):">`:
        DB "Rx(group):"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group1">`:
        DB "Group1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "p2p_message">`:
        DB "p2p_message"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "broadcast_message">`:
        DB "broadcast_message"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "group_message">`:
        DB "group_message"

        END
//  778 
//  779 /*********************************************************************
//  780 *********************************************************************/
// 
// 1 579 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//   155 bytes in segment XDATA_ROM_C
//   159 bytes in segment XDATA_Z
// 
// 1 633 bytes of CODE  memory
//   155 bytes of CONST memory
//     0 bytes of DATA  memory (+ 1 byte shared)
//   159 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
